<?xml version="1.0" encoding="Shift_JIS"?>
<?xml-stylesheet type="text/xsl" href="../Fmethod_xsl/fmethod_he_c.xsl"?>

<root>
  <func>


    <title>cnc_rdmacror</title>



    <declare>
      <vc>
        <include>#include "fwlib32.h"</include>
        <prottype>FWLIBAPI short WINAPI cnc_rdmacror( unsigned short FlibHndl, short s_number, short e_number, short length, IODBMR *macror );</prottype>
      </vc>
    </declare>



    <doc>
        <cmn>
            <p>Reads the custom macro variable specified by "datano_s", "datano_e". The data is stored in "IODBMR" with signed binary format.</p>

            <p>The kinds of custom macro variable are as follows.</p>

            <ol>
                <li>Local variable (#1,..,#33)</li>
                    The local variables which belong to the macro program just being executed when the application program calls this function are read.<br/>
                <li>Common variable (#100,..,#999)</li>
                    See the description of <a href="ncdata/cnc_rdmacroinfo.htm" target="_parent">cnc_rdmacroinfo</a> function about the available range of common variables.<br/>
            </ol>

            <p>It is possible to exchange the type of macro variable by <a href="ncdata/cnc_setmactype.htm" target="_parent">cnc_setmactype</a> function.</p>

            <ul>
                <li>decimal form floating-point type (data format=M*10**(-E))</li>
                <table>
                    <colgroup valign="top">
                    <colgroup valign="top">
                    <colgroup valign="top">
                    <tr>
                        <td>mcr_val</td>
                        <td>:</td>
                        <td>value of variable (=M)<br/>
                        4-byte binary data with sign<br/>
                        (available range:999999999,..,-999999999)</td>
                    </tr>
                    <tr>
                        <td>dec_val</td>
                        <td>:</td>
                        <td>number of places of decimals (=E)<br/>
                        2-byte binary data with sign<br/>
                        (available range:-128,..,127)</td>
                    </tr>
                    </colgroup>
                    </colgroup>
                    </colgroup>
                </table>

                <p>mcr_val always returns by nine digits and adjusts the amount with the value of dec_val.</p><br/>

                <blockquote>
                    Example: When the variable value is 12.345, mcr_val and dec_val are read as follows.<br/>
                    mcr_val = 123450000<br/>
                    dec_val = 7
                </blockquote>

                <li>binary form floating-point type (data format=M*2**(-E))</li>
                <table>
                    <colgroup valign="top">
                    <colgroup valign="top">
                    <colgroup valign="top">
                    <tr>
                        <td>mcr_val</td>
                        <td>:</td>
                        <td>numerical part of variable (=M)<br/>
                        4-byte binary data with sign<br/>
                        (available range:No limitation)</td>
                    </tr>
                    <tr>
                        <td>dec_val</td>
                        <td>:</td>
                        <td>exponent part of variable (=E)<br/>
                        2-byte binary data with sign<br/>
                        (available range:-128,..,127)</td>
                    </tr>
                    </colgroup>
                    </colgroup>
                    </colgroup>
                </table>

            </ul>

            <p>The value of an undefined variable is called "vacant", and it is expressed as follows both at decimal form floating-point type and at binary form floating-point type.</p>

            <blockquote>
                <p>mcr_val = 0<br/>
                dec_val = -1</p>
            </blockquote>

            <p>See "OPERATOR'S MANUAL" of CNC for details of the custom macro variable.</p>
        </cmn>
    </doc>



    <argument>
        <common>
            <vc>
                <item>
                    <name>FlibHndl</name>
                    <type>in</type>
                    <content>
                        <p>
                            Specify the library handle. See "<a href="handle.htm" target="_parent">Library handle</a>" for details.
                        </p>
                    </content>
                </item>
                <item>
                    <name>s_number</name>
                    <type>in</type>
                    <content>
                        <p>Specify the start custom macro variable number.</p>
                    </content>
                </item>
                <item>
                    <name>e_number</name>
                    <type>in</type>
                    <content>
                        <p>Specify the end custom macro variable number.</p>
                    </content>
                </item>
                <item>
                    <name>length</name>
                    <type>in</type>
                    <content>
                        <p>Specify the data block length (size of IODBMR structure).</p>

                        <p class="dd">8+8*(Number of custom macro variable)</p>

                        <p><b>IODBMR</b></p>

                        <p><img src="ncdata/nmacro.gif"/></p>

                        <p>N : Number of custom macro variable </p>

                    </content>
                </item>
                <item>
                    <name>macror</name>
                    <type>out</type>
                    <content>
                        <p>Pointer to the IODBMR structure including the custom macro variable. The IODBMR structure is as follows.</p>

<pre>
typedef struct iodbmr {
    short datano_s; /* start custom macro variable number*/
    short dummy;    /* (not used) */
    short datano_e; /* end custom macro variable number */
    struct {
        long  mcr_val; /* value of custom macro var. */
        short dec_val; /* number of places of decimals*/
    } data[N];         /* N : number of variable */
} IODBMR;
</pre>
                        <dl>
                            <dt>datano_s</dt>
                            <dd>The custom macro variable number which was read first is returned.</dd>
                            <br/>
                            <dt>datano_e</dt>
                            <dd>The custom macro variable number which was read last is returned.</dd>
                        </dl>
                    </content>
                </item>
            </vc>
        </common>
    </argument>



    <errcode>
        <item>
            <name>EW_LENGTH</name>
            <content>Data block length error<br/>Size of IODBMR structure(length) is wrong.</content>
        </item>
        <item>
            <name>EW_NUMBER</name>
            <content>Data number error<br/>Custom macro variable number(s_number, e_number) is wrong.</content>
        </item>
        <item>
            <name>EW_NOOPT</name>
            <content>No option<br/>This function needs the custom macro option.</content>
        </item>
    </errcode>



    <option>
        <hssb>The extended driver/library function is necessary.</hssb>
        <ethr><p>The Ethernet function and the extended driver/library function are necessary.</p>
              <p>However, in case of Series 16i/18i/21i-B, 0i-B/C/D, Series 30i and PMi-A, the required CNC option is as follows.</p>
              <p>When Embedded Ethernet is used,</p>
              <p><ul>above two optional functions are not required.</ul></p>
              <p>When Ethernet board is used,</p>
              <p><ul>only Ethernet function is required.</ul></p>
        </ethr>
        <need>
            <li>Series 15/15i, 30i/31i/32i, 0i-D, PMi-A</li>
            Custom macro<br/>
            <br/>
            <li>Series 16/18/21, 16i/18i/21i, 0i-A.B.C, Power Mate i</li>
            Custom macro B<br/>
            <br/>
        </need>
        <type>
            <li>Series 15</li>
            Custom macro common variable 200 sets<br/>
            Custom macro common variable 300 sets<br/>
            Custom macro common variable 600 sets<br/>
            <br/>
            <li>Series 15i</li>
            Custom macro common variable 900 sets<br/>
            <br/>
            <li>Series 16/18/21, 16i/18i/21i, 0i-A/B/C, Power Mate i, PMi-A</li>
            Custom macro common variable extension<br/>
            <br/>
            <li>Series 30i/31i/32i, 0i-D</li>
            Custom macro common variable extension<br/>
            Embedded macro<br/>
            <br/>
        </type>

        <is>
            <hssb>The extended driver/library function is necessary.</hssb>
            <need>
                Custom macro
            </need>
            <type>
                Custom macro common variable extension<br/>
                Embedded macro
            </type>
        </is>
    </option>



    <parameter>
        <type>
            <ul>
            <li>Series 16i/18i-W</li>
            6005#4,#5,#7 (influenced by setting)
            </ul>
        </type>
    </parameter>
    <is_parameter></is_parameter>



    <mode>
    </mode>



    <support>
        <m>
            <fs0ia>H</fs0ia>
            <fs0ib>O</fs0ib>
            <fs0id>O</fs0id>
            <fs15>H</fs15>
            <fs15i>O</fs15i>
            <fs16>H</fs16>
            <fs18>H</fs18>
            <fs21>H</fs21>
            <fs16ia>O</fs16ia>
            <fs18ia>O</fs18ia>
            <fs21ia>O</fs21ia>
            <fs16ib>O</fs16ib>
            <fs18ib>O</fs18ib>
            <fs21ib>O</fs21ib>
            <fs30ia>O</fs30ia>
            <fs30ib>O</fs30ib>
        </m>
        <t>
            <fs0ia>H</fs0ia>
            <fs0ib>O</fs0ib>
            <fs0id>O</fs0id>
            <fs15>H</fs15>
            <fs15i>X</fs15i>
            <fs16>H</fs16>
            <fs18>H</fs18>
            <fs21>H</fs21>
            <fs16ia>O</fs16ia>
            <fs18ia>O</fs18ia>
            <fs21ia>O</fs21ia>
            <fs16ib>O</fs16ib>
            <fs18ib>O</fs18ib>
            <fs21ib>O</fs21ib>
            <fs30ia>O</fs30ia>
            <fs30ib>O</fs30ib>
        </t>
        <lc>
            <fs0ia>X</fs0ia>
            <fs0ib>X</fs0ib>
            <fs0id>X</fs0id>
            <fs15>X</fs15>
            <fs15i>X</fs15i>
            <fs16>H</fs16>
            <fs18>H</fs18>
            <fs21>H</fs21>
            <fs16ia>H</fs16ia>
            <fs18ia>H</fs18ia>
            <fs21ia>H</fs21ia>
            <fs16ib>H</fs16ib>
            <fs18ib>H</fs18ib>
            <fs21ib>H</fs21ib>
            <fs30ia>X</fs30ia>
            <fs30ib>X</fs30ib>
        </lc>
        <p>
            <fs0id>O</fs0id>
            <fs16i>O</fs16i>
            <fs18i>O</fs18i>
            <fs30ia>X</fs30ia>
            <fs30ib>O</fs30ib>
        </p>
        <l>
            <fs0id>X</fs0id>
            <fs16i>O</fs16i>
            <fs18i>X</fs18i>
            <fs30ia>X</fs30ia>
            <fs30ib>O</fs30ib>
        </l>
        <w>
            <fs0id>X</fs0id>
            <fs16i>O</fs16i>
            <fs18i>O</fs18i>
            <fs30ia>O</fs30ia>
            <fs30ib>O</fs30ib>
        </w>
        <pw>
            <d>O</d>
            <h>O</h>
            <a>O</a>
        </pw>
        <add><b></b></add>

        <is>
            <m>
                <fs30isa>O</fs30isa>
                <fs30isb>O</fs30isb>
            </m>
            <t>
                <fs30isa>O</fs30isa>
                <fs30isb>O</fs30isb>
            </t>
            <w>
                <fs30isa>O</fs30isa>
                <fs30isb>X</fs30isb>
            </w>
        </is>
    </support>



    <reference>
        <item>
            <name>cnc_rdmacro</name>
            <file>ncdata/cnc_rdmacro.htm</file>
        </item>
        <item>
            <name>cnc_wrmacro</name>
            <file>ncdata/cnc_wrmacro.htm</file>
        </item>
        <item>
            <name>cnc_wrmacror</name>
            <file>ncdata/cnc_wrmacror.htm</file>
        </item>
        <item>
            <name>cnc_rdmacror2</name>
            <file>ncdata/cnc_rdmacror2.htm</file>
        </item>
        <item>
            <name>cnc_wrmacror2</name>
            <file>ncdata/cnc_wrmacror2.htm</file>
        </item>
        <item>
            <name>cnc_rdmacroinfo</name>
            <file>ncdata/cnc_rdmacroinfo.htm</file>
        </item>
        <item>
            <name>cnc_getmactype</name>
            <file>ncdata/cnc_getmactype.htm</file>
        </item>
        <item>
            <name>cnc_setmactype</name>
            <file>ncdata/cnc_setmactype.htm</file>
        </item>
    </reference>



    <example>
<vc>
The following program reads the custom macro variables within the specified
range and displays them.

#include "fwlib32.h"

/* start/end are start/end variable number to be read. */
short example( short start, short end )
{
        IODBMR *macror ;
        char strbuf[11] ;
        short ret, idx ;
        macror = (IODBMR *)malloc( 1000 ) ;
        ret = cnc_rdmacror( h, start, end, 1000, macror ) ;
        if ( !ret )
                for ( idx = 0 ; idx &#60;= end-start ; idx++ ) {
                        sprintf( &#38;strbuf[1], "%09ld",
                                        macror-&#62;data[idx].mcr_val ) ;
                        if ( strbuf[1] == '0' ) strbuf[1] = ' ' ;
                        strncpy( &#38;strbuf[0], &#38;strbuf[1],
                                        9 - macror-&#62;data[idx].dec_val ) ;
                        strbuf[9-macror-&#62;data[idx].dec_val] = '.' ;
                        printf( "#%04d  %s\n", start+idx, strbuf ) ;
                }
        else
                printf( "ERROR!(%d)\n", ret ) ;
        free( macror ) ;
        return ( ret ) ;
}
</vc>
    </example>



  </func>
</root>
